class Key {
	field int x1;
	field int y1;
	field Array location;
	field boolean isFound;
	
	/**
	Constructs a new key at a (pseudo)random location within the maze.
	*/
	constructor Key new(){
		let location = GameAssets.chooseLocation();
		let isFound = false;
		do drawUndrawKey(location[0], location[1], true);
		return this;
	}
	
	
	
	
	/**
	Checks if the key has been found for the given x and y coordinates,
	representing the hero's current location.
	*/
	method boolean isFound(int x, int y) {
		if (~(isFound)) {
			if (isFoundHelper(x, x1)) {
				if (isFoundHelper(y, y1)) {
					let isFound = true;
					do drawUndrawKey(x1, y1, false); // delete the key
					return true;
				} else { return false; }
			} else { return false; }
		} else { return false; }
	}
	
	/**
	A helper method containing logical conditional expressions for the isFound method
	*/
	method boolean isFoundHelper(int num1, int num2) {
		if ((num1 > (num2 - 21)) & (num1 < (num2 + 1))) {
			return true; 
		} 
		if ((num1 < (num2 + 21)) & (num1 > (num2 - 1))) {
			return true; 
		}
		return false;
	}
	
	/**
	Draws or undraws the key at the given coordinates.
	*/
	method void drawUndrawKey(int x, int y, boolean draw) {
		var int memAddress;
		let memAddress = GameAssets.getAddress(y, x);
		let x1 = x;
		let y1 = y;
		if (draw) {
			do Memory.poke(memAddress+0, 0);
			do Memory.poke(memAddress+32, 0);
			do Memory.poke(memAddress+64, 0);
			do Memory.poke(memAddress+96, 0);
			do Memory.poke(memAddress+128, 60);
			do Memory.poke(memAddress+160, 126);
			do Memory.poke(memAddress+192, 103);
			do Memory.poke(memAddress+224, -29);
			do Memory.poke(memAddress+256, -29);
			do Memory.poke(memAddress+288, 26727);
			do Memory.poke(memAddress+320, 26750);
			do Memory.poke(memAddress+352, 60);
			do Memory.poke(memAddress+384, 0);
			do Memory.poke(memAddress+416, 0);
			do Memory.poke(memAddress+448, 0);
			do Memory.poke(memAddress+480, 0);
		} else {
			do Memory.poke(memAddress+0, 0);
			do Memory.poke(memAddress+32, 0);
			do Memory.poke(memAddress+64, 0);
			do Memory.poke(memAddress+96, 0);
			do Memory.poke(memAddress+128, 0);
			do Memory.poke(memAddress+160, 0);
			do Memory.poke(memAddress+192, 0);
			do Memory.poke(memAddress+224, 0);
			do Memory.poke(memAddress+256, 0);
			do Memory.poke(memAddress+288, 0);
			do Memory.poke(memAddress+320, 0);
			do Memory.poke(memAddress+352, 0);
			do Memory.poke(memAddress+384, 0);
			do Memory.poke(memAddress+416, 0);
			do Memory.poke(memAddress+448, 0);
			do Memory.poke(memAddress+480, 0);
		}
		return;
	}
	
	/**
	Resets the key to a new, (pseudo)random position, and sets the isFound boolean to false.
	*/
	method void resetKey() {
		do drawUndrawKey(x1, y1, false);
		let location = GameAssets.chooseLocation();
		let isFound = false;
		do drawUndrawKey(location[0], location[1], true);
		return;
	}
	
	/**
	A dispose method for garbage collection and deallocation of memory.
	*/
	method void dispose(){
		do location.dispose();
		do Memory.deAlloc(this);
		return;
	}
	
	method int getX() {
		return x1;
	}
	
	method int getY() {
		return y1;
	}
}
