class Hero {
	field int x,y;
	field int moveIncrement;

	constructor Hero new(){
		let x=480;
		let y=224;
		let moveIncrement = 4;
		do drawUndrawHero(x,y, true);
		return this;
	}

	method void drawUndrawHero(int x, int y, boolean draw) {
		var int memAddress;
		let memAddress = MazeGame.getAddress(y, x);
		if (draw) {
			do Memory.poke(memAddress+0, 2016);
			do Memory.poke(memAddress+32, 8184);
			do Memory.poke(memAddress+64, 16380);
			do Memory.poke(memAddress+96, 20286);
			do Memory.poke(memAddress+128, -31202);
			do Memory.poke(memAddress+160, -22881);
			do Memory.poke(memAddress+192, -31201);
			do Memory.poke(memAddress+224, -12481);
			do Memory.poke(memAddress+256, -1);
			do Memory.poke(memAddress+288, -2305);
			do Memory.poke(memAddress+320, -1537);
			do Memory.poke(memAddress+352, -1);
			do Memory.poke(memAddress+384, 32766);
			do Memory.poke(memAddress+416, 32766);
			do Memory.poke(memAddress+448, 30523);
			do Memory.poke(memAddress+480, 9009);
		} else {
			do Memory.poke(memAddress+0, 0);
			do Memory.poke(memAddress+32, 0);
			do Memory.poke(memAddress+64, 0);
			do Memory.poke(memAddress+96, 0);
			do Memory.poke(memAddress+128, 0);
			do Memory.poke(memAddress+160, 0);
			do Memory.poke(memAddress+192, 0);
			do Memory.poke(memAddress+224, 0);
			do Memory.poke(memAddress+256, 0);
			do Memory.poke(memAddress+288, 0);
			do Memory.poke(memAddress+320, 0);
			do Memory.poke(memAddress+352, 0);
			do Memory.poke(memAddress+384, 0);
			do Memory.poke(memAddress+416, 0);
			do Memory.poke(memAddress+448, 0);
			do Memory.poke(memAddress+480, 0);
		}
		return;
	}

	
	
	
	method boolean isCollision(int x, int y, int direction) {
		var int addr1;
		var int addr2;
		var boolean collision;
		let collision = false;
		if (direction = 1) { // up
			let addr1 = MazeGame.getAddress((y - moveIncrement + 1), x);
			let addr2 = MazeGame.getAddress((y - moveIncrement + 1), x + 14);
		}
		if (direction = 2) { // down
			let addr1 = MazeGame.getAddress((y + 14 + moveIncrement), x);
			let addr2 = MazeGame.getAddress((y + 14 + moveIncrement), x + 14);
		}
		if (direction = 3) { // left
			let addr1 = MazeGame.getAddress(y, x - moveIncrement);
			let addr2 = MazeGame.getAddress(y + 14, x - moveIncrement);
		}
		if (direction = 4) { // right
			let addr1 = MazeGame.getAddress(y, x + 14 + moveIncrement);
			let addr2 = MazeGame.getAddress(y + 14, x + 14 + moveIncrement);
			
		}
		if ((Memory.peek(addr1) = -1) | (Memory.peek(addr2) = -1)) {
			let collision = true;
		}
		return collision;
	}
   
	method void moveUp() {
		if (~(isCollision(x, y, 1))) {
			do drawUndrawHero(x ,y, false);
			let y = y - moveIncrement;
			do drawUndrawHero(x ,y, true);
		}
		return;
	}
	
	method void moveDown() {
		if (~(isCollision(x, y, 2))) {
			do drawUndrawHero(x ,y, false);
			let y = y + moveIncrement;
			do drawUndrawHero(x ,y, true);
		}
		return;
	}
	
	method void moveLeft() {
		if (~(isCollision(x, y, 3))) {
			do drawUndrawHero(x ,y, false);
			let x = x - moveIncrement;
			do drawUndrawHero(x ,y, true);
		}
		return;
	}
	
	method void moveRight() {
		if (~(isCollision(x, y, 4))) {
			do drawUndrawHero(x ,y, false);
			let x = x + moveIncrement;
			do drawUndrawHero(x ,y, true);
		}
		return;
	}
   
}